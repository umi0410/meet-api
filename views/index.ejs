<!DOCTYPE html>
<html lang="en">
	<head>
		<!-- Required meta tags -->
		<meta charset="utf-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1, shrink-to-fit=no"
		/>

		<!-- Bootstrap CSS -->
		<link
			rel="stylesheet"
			href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
			integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
			crossorigin="anonymous"
		/>

		<!-- Adsense Authenticate -->
		<script
			data-ad-client="ca-pub-8490873562929718"
			async
			src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"
		></script>
		<title><%= title %></title>
	</head>
	<body>
		<div class="container"><h2><%= title %></h2></div>

		<article class="markdown-body entry-content p-5" itemprop="text">
			<h1>
				<a
					id="user-content-대학교-기반-소개팅-express-api-server"
					class="anchor"
					aria-hidden="true"
					href="#대학교-기반-소개팅-express-api-server"
					><svg
						class="octicon octicon-link"
						viewBox="0 0 16 16"
						version="1.1"
						width="16"
						height="16"
						aria-hidden="true"
					>
						<path
							fill-rule="evenodd"
							d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
						></path></svg></a
				>대학교 기반 소개팅 Express API server
			</h1>
			<blockquote>
				<p>본 Repository는 주로 private 상태로 개발합니다.</p>
				<p>
					함께 개발 중인
					<a href="https://github.com/umi0410/meet"
						>React PWA repository</a
					>
				</p>
			</blockquote>
			<p>
				<a target="_blank" rel="noopener noreferrer" href="/preview.png"
					><img
						src="/images/preview.png"
						alt="preview.png"
						style="max-width:100%;"
				/></a>
			</p>
			<h2>
				<a
					id="user-content-meeting-app-api-server-기술-스택"
					class="anchor"
					aria-hidden="true"
					href="#meeting-app-api-server-기술-스택"
					><svg
						class="octicon octicon-link"
						viewBox="0 0 16 16"
						version="1.1"
						width="16"
						height="16"
						aria-hidden="true"
					>
						<path
							fill-rule="evenodd"
							d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
						></path></svg></a
				>Meeting app API server 기술 스택
			</h2>
			<ul>
				<li>
					<p>
						nodejs express, Socket.io , MongoDB, Socket.io 를 통한
						API server
					</p>
				</li>
				<li>
					<p>
						AWS PipeLine(CodeBuild, CodeDeploy)를 통한 배포 자동화
					</p>
				</li>
				<li>
					<p>Docker, docker-compose, ECR을 통한 편리한 배포</p>
				</li>
			</ul>
			<h2>
				<a
					id="user-content-codepipeline-docker-설정---20200202"
					class="anchor"
					aria-hidden="true"
					href="#codepipeline-docker-설정---20200202"
					><svg
						class="octicon octicon-link"
						viewBox="0 0 16 16"
						version="1.1"
						width="16"
						height="16"
						aria-hidden="true"
					>
						<path
							fill-rule="evenodd"
							d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
						></path></svg></a
				>CodePipeLine, Docker 설정 - 20200202
			</h2>
			<h4>
				<a
					id="user-content-workflow"
					class="anchor"
					aria-hidden="true"
					href="#workflow"
					><svg
						class="octicon octicon-link"
						viewBox="0 0 16 16"
						version="1.1"
						width="16"
						height="16"
						aria-hidden="true"
					>
						<path
							fill-rule="evenodd"
							d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
						></path></svg></a
				>Workflow
			</h4>
			<p>
				<code>docker-compose</code>를 통해 <code>express</code>와
				<code>mongo</code> container 이용.
			</p>
			<p>
				대개 필요한 <code>node_modules</code>는 <code>ECR</code>의
				<code>meet-api:base-node</code> 태그 이미지에 저장해두었음.
			</p>
			<p>
				이후에 변경사항은 <code>docker-compose</code>에서 바로
				<code>meet-api.Dockerfile</code>을 통해 build 해서 run 시킨다.
			</p>
			<p>
				<code>CodePipeLine</code>에선 <code>CodeBuild</code>와
				<code>CodeDeploy</code>를 이용한다.
			</p>
			<p>
				<code>CodeBuild</code>는 사실상 github 소스 자체(node_modules
				제외)를 CodeDeploy에게 넘겨주는 역할일 뿐이고,
				<code>CodeDeploy</code>에서 넘겨받은 파일을 바탕으로
				<code>docker-compose.yml</code>의 build에서 docker image를
				빌드한 뒤 바로 <code>docker-compose up -d</code>를 통해
				deploy한다.
			</p>
			<p>
				이 때 CodeDeploy 를 통해 EC2가 IAM Role로 ECR에 접근하는 것이
				아니라, aws cli를 통해 직접 ECR에 로그인하기 때문에, IAM User가
				ECR에 대한 접근 권한이 있어야한다. (ubuntu user마다 aws
				configure가 달라질 수 있음을 주의할 것)
			</p>
			<h4>
				<a
					id="user-content-advantages"
					class="anchor"
					aria-hidden="true"
					href="#advantages"
					><svg
						class="octicon octicon-link"
						viewBox="0 0 16 16"
						version="1.1"
						width="16"
						height="16"
						aria-hidden="true"
					>
						<path
							fill-rule="evenodd"
							d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
						></path></svg></a
				>Advantages?
			</h4>
			<p>
				결과적으로 <code>CodePipeLine</code>과
				<code>docker-compose</code>를 이용함으로써
				<code>github repository</code>의 <code>master branch</code>로
				푸시하기만 하면 <code>EC2</code>에
				<code
					>docker-compose down을 실행시킴으로써 원래 서버 작업을
					중단시키고 새로 이미지를 빌드한 뒤 </code
				>docker-compose up -d` 를 수행하는 작업 모두가 자동화 되었다.
			</p>
			<h3>
				<a
					id="user-content-disadvantages"
					class="anchor"
					aria-hidden="true"
					href="#disadvantages"
					><svg
						class="octicon octicon-link"
						viewBox="0 0 16 16"
						version="1.1"
						width="16"
						height="16"
						aria-hidden="true"
					>
						<path
							fill-rule="evenodd"
							d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
						></path></svg></a
				>Disadvantages?
			</h3>
			<p>
				아직 CI 기능은 사실상 필요가 없는 듯하다. 여럿이서 작업을 하며
				통합할 내용이 있는 것도 아니고, 테스트가 추가되어있지도 않기
				때문이다. 사실상 CodeBuild가 하는 일이 없다.
				<del>통합</del>이라기 보단 그냥 Code 전달용이다. 그래도 추후에
				필요할 때 CodeBuild든 CodePipeline이든 가져다 쓰기 위해서는 좋은
				연습인 것 같다.
			</p>
			<p>
				docker를 이용해서 배포는 편하지만 로그 남기기가 쉽지 않아보인다.
				어떤 식으로 로그를 남길 지 한 번 고민해봐야겠다.
			</p>
			<h2>
				<a
					id="user-content-how-to-run-the-server"
					class="anchor"
					aria-hidden="true"
					href="#how-to-run-the-server"
					><svg
						class="octicon octicon-link"
						viewBox="0 0 16 16"
						version="1.1"
						width="16"
						height="16"
						aria-hidden="true"
					>
						<path
							fill-rule="evenodd"
							d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
						></path></svg></a
				>How to run the server
			</h2>
			<p>
				CodePipeline으로 CI/CD를 구축해놨기때문에, github repository의
				master 브랜치로 푸시가 가면 자동배포된다.
			</p>
			<p>
				수동으로 배포할 경우는
				<code>docker-compose down &amp;&amp; docker-compose up</code> 한
				줄이면 된다.
			</p>
		</article>

		<!-- Optional JavaScript -->
		<!-- jQuery first, then Popper.js, then Bootstrap JS -->
		<script
			src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
			integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
			crossorigin="anonymous"
		></script>
		<script
			src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
			integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
			crossorigin="anonymous"
		></script>
		<script
			src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
			integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
			crossorigin="anonymous"
		></script>
	</body>
</html>
